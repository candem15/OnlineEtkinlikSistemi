// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OES.API.Persistence.Contexts;

#nullable disable

namespace OES.API.Persistence.Migrations
{
    [DbContext(typeof(OESAPIDbContext))]
    [Migration("20221001013652_Migration_2")]
    partial class Migration_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppUserEtkinlik", b =>
                {
                    b.Property<Guid>("EtkinliklerId")
                        .HasColumnType("uuid");

                    b.Property<string>("KatilimcilarId")
                        .HasColumnType("text");

                    b.HasKey("EtkinliklerId", "KatilimcilarId");

                    b.HasIndex("KatilimcilarId");

                    b.ToTable("AppUserEtkinlik");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7210"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OES.API.Domain.Entities.Bilet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("BiletUcreti")
                        .HasColumnType("double precision");

                    b.Property<Guid>("EtkinlikId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("GuncellenmeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EtkinlikId")
                        .IsUnique();

                    b.ToTable("Biletler");
                });

            modelBuilder.Entity("OES.API.Domain.Entities.Etkinlik", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Aciklama")
                        .HasColumnType("text");

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EtkinlikAdi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EtkinlikOnayi")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EtkinlikTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("GuncellenmeTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("KategoriId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OlusturulmaTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SehirId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SonBasvuruTarihi")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("KategoriId");

                    b.HasIndex("SehirId");

                    b.ToTable("Etkinlikler");
                });

            modelBuilder.Entity("OES.API.Domain.Entities.Kategori", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("KategoriAdi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Kategoriler");
                });

            modelBuilder.Entity("OES.API.Domain.Entities.Kontenjan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EtkinlikId")
                        .HasColumnType("uuid");

                    b.Property<int>("KatilimciKapasitesi")
                        .HasColumnType("integer");

                    b.Property<int>("KatilimciSayisi")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EtkinlikId")
                        .IsUnique();

                    b.ToTable("Kontenjanlar");
                });

            modelBuilder.Entity("OES.API.Domain.Entities.Sehir", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SehirAdi")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sehirler");
                });

            modelBuilder.Entity("OES.API.Domain.Identity.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            ConcurrencyStamp = "1a870f35-5d91-4f58-b7c2-7644f4cba735",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "391c72c8-9403-4c93-a4a4-4c2febd00d74",
                            ConcurrencyStamp = "fa9046c8-08d9-46a8-b9c2-d9e436c20324",
                            Name = "Basit",
                            NormalizedName = "BASIT"
                        },
                        new
                        {
                            Id = "9505059f-22c8-4940-9889-52d6d05b5790",
                            ConcurrencyStamp = "dcc5634d-d0c5-4ae9-9dc6-9b67b7ef3a81",
                            Name = "Firma",
                            NormalizedName = "FIRMA"
                        });
                });

            modelBuilder.Entity("OES.API.Domain.Identity.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Ad")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("WebSitesi")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            Ad = "admin",
                            ConcurrencyStamp = "b10223db-522e-406f-a738-81e4f1c3ffaf",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECVziwjk1bazeibwNrEdbugMHok/o268XMxbmF9o2Oxj5/qk7qins7g0p9lyTpmhhg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("AppUserEtkinlik", b =>
                {
                    b.HasOne("OES.API.Domain.Entities.Etkinlik", null)
                        .WithMany()
                        .HasForeignKey("EtkinliklerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OES.API.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("KatilimcilarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("OES.API.Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OES.API.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OES.API.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("OES.API.Domain.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OES.API.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OES.API.Domain.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OES.API.Domain.Entities.Bilet", b =>
                {
                    b.HasOne("OES.API.Domain.Entities.Etkinlik", "Etkinlik")
                        .WithOne("Bilet")
                        .HasForeignKey("OES.API.Domain.Entities.Bilet", "EtkinlikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etkinlik");
                });

            modelBuilder.Entity("OES.API.Domain.Entities.Etkinlik", b =>
                {
                    b.HasOne("OES.API.Domain.Entities.Kategori", "Kategori")
                        .WithMany("Etkinlikler")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OES.API.Domain.Entities.Sehir", "Sehir")
                        .WithMany("Etkinlikler")
                        .HasForeignKey("SehirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");

                    b.Navigation("Sehir");
                });

            modelBuilder.Entity("OES.API.Domain.Entities.Kontenjan", b =>
                {
                    b.HasOne("OES.API.Domain.Entities.Etkinlik", "Etkinlik")
                        .WithOne("Kontenjan")
                        .HasForeignKey("OES.API.Domain.Entities.Kontenjan", "EtkinlikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Etkinlik");
                });

            modelBuilder.Entity("OES.API.Domain.Entities.Etkinlik", b =>
                {
                    b.Navigation("Bilet");

                    b.Navigation("Kontenjan")
                        .IsRequired();
                });

            modelBuilder.Entity("OES.API.Domain.Entities.Kategori", b =>
                {
                    b.Navigation("Etkinlikler");
                });

            modelBuilder.Entity("OES.API.Domain.Entities.Sehir", b =>
                {
                    b.Navigation("Etkinlikler");
                });
#pragma warning restore 612, 618
        }
    }
}
